/**
 * Tests for the addTask function in task-manager.js
 */

import { jest } from '@jest/globals';
import { sampleTasks } from '../../fixtures/sample-tasks.js'; // CORRECTED PATH

// Helper function (simplified version for testing)
const testAddTask = (
	tasksData,
	taskPrompt,
	dependencies = [],
	priority = 'medium'
) => {
	// Create a new task with a higher ID
	const highestId = Math.max(0, ...tasksData.tasks.map((t) => t.id)); // Ensure highestId is at least 0
	const newId = highestId + 1;

	// Create mock task based on what would be generated by AI
	const newTask = {
		id: newId,
		title: `Task from prompt: ${taskPrompt.substring(0, 20)}...`,
		description: `Task generated from: ${taskPrompt}`,
		status: 'pending',
		dependencies: dependencies,
		priority: priority,
		details: `Implementation details for task generated from prompt: ${taskPrompt}`,
		testStrategy: 'Write unit tests to verify functionality'
	};

	// Check dependencies
	for (const depId of dependencies) {
		const dependency = tasksData.tasks.find((t) => t.id === depId);
		if (!dependency) {
			throw new Error(`Dependency task ${depId} not found`);
		}
	}

	// Add task to tasks array (create a copy to avoid modifying input directly)
	const updatedTasksData = JSON.parse(JSON.stringify(tasksData));
	updatedTasksData.tasks.push(newTask);

	return {
		updatedData: updatedTasksData,
		newTask
	};
};

describe('addTask function', () => {
	// No beforeEach needed here as testAddTask is pure
	test('should add a new task using AI (mocked)', async () => {
		// Arrange
		const initialTasksData = JSON.parse(JSON.stringify(sampleTasks));
		const prompt = 'Create a new authentication system';

		// Act
		const result = testAddTask(initialTasksData, prompt);

		// Assert
		expect(result.newTask.id).toBe(
			Math.max(...sampleTasks.tasks.map((t) => t.id)) + 1
		);
		expect(result.newTask.status).toBe('pending');
		expect(result.newTask.title).toContain(prompt.substring(0, 20));
		expect(result.updatedData.tasks.length).toBe(sampleTasks.tasks.length + 1);
	});

	test('should validate dependencies when adding a task', async () => {
		// Arrange
		const initialTasksData = JSON.parse(JSON.stringify(sampleTasks));
		const prompt = 'Create a new authentication system';
		const validDependencies = [1, 2]; // These exist in sampleTasks

		// Act
		const result = testAddTask(
			initialTasksData,
			prompt,
			validDependencies
		);

		// Assert
		expect(result.newTask.dependencies).toEqual(validDependencies);

		// Test invalid dependency
		expect(() => {
			testAddTask(initialTasksData, prompt, [999]); // Non-existent task ID
		}).toThrow('Dependency task 999 not found');
	});

	test('should use specified priority', async () => {
		// Arrange
		const initialTasksData = JSON.parse(JSON.stringify(sampleTasks));
		const prompt = 'Create a new authentication system';
		const priority = 'high';

		// Act
		const result = testAddTask(initialTasksData, prompt, [], priority);

		// Assert
		expect(result.newTask.priority).toBe(priority);
	});
}); 